// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/objectbox_models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6258115972404249335),
      name: 'Conversion',
      lastPropertyId: const obx_int.IdUid(7, 905922068841682306),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8604200031220244783),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9202351488866148428),
            name: 'descEN',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7298311886452211771),
            name: 'descFR',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5877762822117907900),
            name: 'factor',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1729286742440811135),
            name: 'nutrientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 2440321363782279921),
            relationTarget: 'Nutrient'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 9100055661404955199),
            name: 'measureId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 905922068841682306),
            name: 'foodId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4044495939055305156),
      name: 'IngredientItem',
      lastPropertyId: const obx_int.IdUid(9, 780675996808017377),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8014277401507612088),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9151430585078587242),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 981053507797126297),
            name: 'unit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2631347488874642789),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1246905507888395957),
            name: 'shape',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2184864783158863125),
            name: 'foodId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6236051589328793269),
            name: 'stepId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 6547559057634504768),
            relationTarget: 'RecipeStep'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 780675996808017377),
            name: 'conversionId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4390279895634574532),
      name: 'Nutrient',
      lastPropertyId: const obx_int.IdUid(50, 3965645087550855785),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1186487441911206837),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5303145012319275539),
            name: 'descEN',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3169254619375292838),
            name: 'descFR',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2001077991159847058),
            name: 'protein',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 36788368599632073),
            name: 'water',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1792117613728295569),
            name: 'lipidTotal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4030084621276656039),
            name: 'energKcal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4325307815249569682),
            name: 'carbohydrates',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 799539450485959812),
            name: 'ash',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3525599181850156765),
            name: 'fiber',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 451853166472450540),
            name: 'sugar',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7689685620402365300),
            name: 'calcium',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5433618270446722484),
            name: 'iron',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1448531565401091298),
            name: 'magnesium',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 847323505599430390),
            name: 'phosphorus',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5592379994306537788),
            name: 'potassium',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3073714790686521293),
            name: 'sodium',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 6924932204835184177),
            name: 'zinc',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 9038800682622686051),
            name: 'copper',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5550900669435965788),
            name: 'manganese',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 5058900097371260550),
            name: 'selenium',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 5068313499915885683),
            name: 'vitaminC',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 154363504645866734),
            name: 'thiamin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 8470193417007511251),
            name: 'riboflavin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 3699702148106388543),
            name: 'niacin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 3798950894308457944),
            name: 'pantoAcid',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 1102802854869631430),
            name: 'vitaminB6',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8006541650099894518),
            name: 'folateTotal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 1631277860042997028),
            name: 'folicAcid',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 4071319276572970218),
            name: 'foodFolate',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 5799354516572051023),
            name: 'folateDFE',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 3681040581447649387),
            name: 'cholineTotal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 6202615931484110828),
            name: 'vitaminB12',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 5673982438993578678),
            name: 'vitaminAIU',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 5508204115422525592),
            name: 'vitaminARAE',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 8652427811194148949),
            name: 'retinol',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 8375942112827678563),
            name: 'alphaCarot',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 6071122141950266656),
            name: 'betaCarot',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 1457394071297846351),
            name: 'betaCrypt',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 7806129080958078298),
            name: 'lycopene',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 4343762426690754600),
            name: 'lutZea',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 2966594369446083375),
            name: 'vitaminE',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 6611227159730847870),
            name: 'vitaminD',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 3200632239188278562),
            name: 'vitaminDIU',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 2868218333883205129),
            name: 'vitaminK',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 6183847045805496559),
            name: 'FASat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 7092997154809799620),
            name: 'FAMono',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 9046262514356352783),
            name: 'FAPoly',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 6570446930734961847),
            name: 'cholesterol',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 3965645087550855785),
            name: 'foodId',
            type: 6,
            flags: 40,
            indexId: const obx_int.IdUid(6, 2705793105657317534))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'conversions', srcEntity: 'Conversion', srcField: 'nutrient')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2416326191381789094),
      name: 'Recipe',
      lastPropertyId: const obx_int.IdUid(17, 2009893959184411872),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6490349039015580475),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1816101909760867429),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3712783720548206720),
            name: 'source',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4599138978355537896),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1113375781761955263),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5982327281449889150),
            name: 'servings',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7224510200481207547),
            name: 'category',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1081303392613435180),
            name: 'countryCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7278219391415914417),
            name: 'calories',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4086684423918074660),
            name: 'time',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2084236262118415261),
            name: 'month',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 528459893117606919),
            name: 'carbohydrates',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3183327091994391619),
            name: 'piecesPerServing',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5302647336661836594),
            name: 'cookTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 174372293399345131),
            name: 'prepTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2009893959184411872),
            name: 'makeAhead',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'steps', srcEntity: 'RecipeStep', srcField: 'recipe')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4388955433426848727),
      name: 'RecipeStep',
      lastPropertyId: const obx_int.IdUid(6, 7763688450360137610),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8851173125758025260),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6784247177741292948),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4880341097545631725),
            name: 'instruction',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8133710026707724969),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 682637197935843845),
            name: 'timer',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7763688450360137610),
            name: 'recipeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4653395338623598876),
            relationTarget: 'Recipe')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'ingredients', srcEntity: 'IngredientItem', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7362449003810345176),
      name: 'Tag',
      lastPropertyId: const obx_int.IdUid(3, 6654200120975732863),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6526773556714813656),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2866481764279356746),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 7598214341922616506)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6654200120975732863),
            name: 'recipeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 3459184964907489599),
            relationTarget: 'Recipe')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 7362449003810345176),
      lastIndexId: const obx_int.IdUid(6, 2705793105657317534),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [4179309004405117661, 8847534544833626113],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Conversion: obx_int.EntityDefinition<Conversion>(
        model: _entities[0],
        toOneRelations: (Conversion object) => [object.nutrient],
        toManyRelations: (Conversion object) => {},
        getId: (Conversion object) => object.id,
        setId: (Conversion object, int id) {
          object.id = id;
        },
        objectToFB: (Conversion object, fb.Builder fbb) {
          final descENOffset = fbb.writeString(object.descEN);
          final descFROffset = fbb.writeString(object.descFR);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descENOffset);
          fbb.addOffset(2, descFROffset);
          fbb.addFloat64(3, object.factor);
          fbb.addInt64(4, object.nutrient.targetId);
          fbb.addInt64(5, object.measureId);
          fbb.addInt64(6, object.foodId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final foodIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final measureIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final descENParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descFRParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final factorParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = Conversion(
              id: idParam,
              foodId: foodIdParam,
              measureId: measureIdParam,
              descEN: descENParam,
              descFR: descFRParam,
              factor: factorParam);
          object.nutrient.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.nutrient.attach(store);
          return object;
        }),
    IngredientItem: obx_int.EntityDefinition<IngredientItem>(
        model: _entities[1],
        toOneRelations: (IngredientItem object) => [object.step],
        toManyRelations: (IngredientItem object) => {},
        getId: (IngredientItem object) => object.id,
        setId: (IngredientItem object, int id) {
          object.id = id;
        },
        objectToFB: (IngredientItem object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final unitOffset = fbb.writeString(object.unit);
          final shapeOffset = fbb.writeString(object.shape);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, unitOffset);
          fbb.addFloat64(3, object.quantity);
          fbb.addOffset(4, shapeOffset);
          fbb.addInt64(5, object.foodId);
          fbb.addInt64(7, object.step.targetId);
          fbb.addInt64(8, object.conversionId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final unitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final shapeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final foodIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final conversionIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = IngredientItem(
              id: idParam,
              name: nameParam,
              unit: unitParam,
              quantity: quantityParam,
              shape: shapeParam,
              foodId: foodIdParam,
              conversionId: conversionIdParam);
          object.step.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.step.attach(store);
          return object;
        }),
    Nutrient: obx_int.EntityDefinition<Nutrient>(
        model: _entities[2],
        toOneRelations: (Nutrient object) => [],
        toManyRelations: (Nutrient object) => {
              obx_int.RelInfo<Conversion>.toOneBacklink(5, object.id,
                      (Conversion srcObject) => srcObject.nutrient):
                  object.conversions
            },
        getId: (Nutrient object) => object.id,
        setId: (Nutrient object, int id) {
          object.id = id;
        },
        objectToFB: (Nutrient object, fb.Builder fbb) {
          final descENOffset = fbb.writeString(object.descEN);
          final descFROffset = fbb.writeString(object.descFR);
          fbb.startTable(51);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descENOffset);
          fbb.addOffset(2, descFROffset);
          fbb.addFloat64(3, object.protein);
          fbb.addFloat64(4, object.water);
          fbb.addFloat64(5, object.lipidTotal);
          fbb.addFloat64(6, object.energKcal);
          fbb.addFloat64(7, object.carbohydrates);
          fbb.addFloat64(8, object.ash);
          fbb.addFloat64(9, object.fiber);
          fbb.addFloat64(10, object.sugar);
          fbb.addFloat64(11, object.calcium);
          fbb.addFloat64(12, object.iron);
          fbb.addFloat64(13, object.magnesium);
          fbb.addFloat64(14, object.phosphorus);
          fbb.addFloat64(15, object.potassium);
          fbb.addFloat64(16, object.sodium);
          fbb.addFloat64(17, object.zinc);
          fbb.addFloat64(18, object.copper);
          fbb.addFloat64(19, object.manganese);
          fbb.addFloat64(20, object.selenium);
          fbb.addFloat64(21, object.vitaminC);
          fbb.addFloat64(22, object.thiamin);
          fbb.addFloat64(23, object.riboflavin);
          fbb.addFloat64(24, object.niacin);
          fbb.addFloat64(25, object.pantoAcid);
          fbb.addFloat64(26, object.vitaminB6);
          fbb.addFloat64(27, object.folateTotal);
          fbb.addFloat64(28, object.folicAcid);
          fbb.addFloat64(29, object.foodFolate);
          fbb.addFloat64(30, object.folateDFE);
          fbb.addFloat64(31, object.cholineTotal);
          fbb.addFloat64(32, object.vitaminB12);
          fbb.addFloat64(33, object.vitaminAIU);
          fbb.addFloat64(34, object.vitaminARAE);
          fbb.addFloat64(35, object.retinol);
          fbb.addFloat64(36, object.alphaCarot);
          fbb.addFloat64(37, object.betaCarot);
          fbb.addFloat64(38, object.betaCrypt);
          fbb.addFloat64(39, object.lycopene);
          fbb.addFloat64(40, object.lutZea);
          fbb.addFloat64(41, object.vitaminE);
          fbb.addFloat64(42, object.vitaminD);
          fbb.addFloat64(43, object.vitaminDIU);
          fbb.addFloat64(44, object.vitaminK);
          fbb.addFloat64(45, object.FASat);
          fbb.addFloat64(46, object.FAMono);
          fbb.addFloat64(47, object.FAPoly);
          fbb.addFloat64(48, object.cholesterol);
          fbb.addInt64(49, object.foodId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final foodIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 102, 0);
          final descENParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descFRParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final proteinParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final waterParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final lipidTotalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final energKcalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final carbohydratesParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final ashParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final fiberParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final sugarParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final calciumParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final ironParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final magnesiumParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final phosphorusParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final potassiumParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final sodiumParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final zincParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0);
          final copperParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final manganeseParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 42, 0);
          final seleniumParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 44, 0);
          final vitaminCParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 46, 0);
          final thiaminParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final riboflavinParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 50, 0);
          final niacinParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 52, 0);
          final pantoAcidParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 54, 0);
          final vitaminB6Param =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 56, 0);
          final folateTotalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 58, 0);
          final folicAcidParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 60, 0);
          final foodFolateParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 62, 0);
          final folateDFEParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 64, 0);
          final cholineTotalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 66, 0);
          final vitaminB12Param =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 68, 0);
          final vitaminAIUParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 70, 0);
          final vitaminARAEParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 72, 0);
          final retinolParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 74, 0);
          final alphaCarotParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 76, 0);
          final betaCarotParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 78, 0);
          final betaCryptParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 80, 0);
          final lycopeneParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 82, 0);
          final lutZeaParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 84, 0);
          final vitaminEParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 86, 0);
          final vitaminDParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 88, 0);
          final vitaminDIUParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 90, 0);
          final vitaminKParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 92, 0);
          final FASatParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 94, 0);
          final FAMonoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 96, 0);
          final FAPolyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 98, 0);
          final cholesterolParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 100, 0);
          final object = Nutrient(
              id: idParam,
              foodId: foodIdParam,
              descEN: descENParam,
              descFR: descFRParam,
              protein: proteinParam,
              water: waterParam,
              lipidTotal: lipidTotalParam,
              energKcal: energKcalParam,
              carbohydrates: carbohydratesParam,
              ash: ashParam,
              fiber: fiberParam,
              sugar: sugarParam,
              calcium: calciumParam,
              iron: ironParam,
              magnesium: magnesiumParam,
              phosphorus: phosphorusParam,
              potassium: potassiumParam,
              sodium: sodiumParam,
              zinc: zincParam,
              copper: copperParam,
              manganese: manganeseParam,
              selenium: seleniumParam,
              vitaminC: vitaminCParam,
              thiamin: thiaminParam,
              riboflavin: riboflavinParam,
              niacin: niacinParam,
              pantoAcid: pantoAcidParam,
              vitaminB6: vitaminB6Param,
              folateTotal: folateTotalParam,
              folicAcid: folicAcidParam,
              foodFolate: foodFolateParam,
              folateDFE: folateDFEParam,
              cholineTotal: cholineTotalParam,
              vitaminB12: vitaminB12Param,
              vitaminAIU: vitaminAIUParam,
              vitaminARAE: vitaminARAEParam,
              retinol: retinolParam,
              alphaCarot: alphaCarotParam,
              betaCarot: betaCarotParam,
              betaCrypt: betaCryptParam,
              lycopene: lycopeneParam,
              lutZea: lutZeaParam,
              vitaminE: vitaminEParam,
              vitaminD: vitaminDParam,
              vitaminDIU: vitaminDIUParam,
              vitaminK: vitaminKParam,
              FASat: FASatParam,
              FAMono: FAMonoParam,
              FAPoly: FAPolyParam,
              cholesterol: cholesterolParam);
          obx_int.InternalToManyAccess.setRelInfo<Nutrient>(
              object.conversions,
              store,
              obx_int.RelInfo<Conversion>.toOneBacklink(
                  5, object.id, (Conversion srcObject) => srcObject.nutrient));
          return object;
        }),
    Recipe: obx_int.EntityDefinition<Recipe>(
        model: _entities[3],
        toOneRelations: (Recipe object) => [],
        toManyRelations: (Recipe object) => {
              obx_int.RelInfo<RecipeStep>.toOneBacklink(
                      6, object.id, (RecipeStep srcObject) => srcObject.recipe):
                  object.steps
            },
        getId: (Recipe object) => object.id,
        setId: (Recipe object, int id) {
          object.id = id;
        },
        objectToFB: (Recipe object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final sourceOffset = fbb.writeString(object.source);
          final imagePathOffset = fbb.writeString(object.imagePath);
          final notesOffset = fbb.writeString(object.notes);
          final countryCodeOffset = fbb.writeString(object.countryCode);
          final makeAheadOffset = fbb.writeString(object.makeAhead);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, sourceOffset);
          fbb.addOffset(3, imagePathOffset);
          fbb.addOffset(4, notesOffset);
          fbb.addInt64(5, object.servings);
          fbb.addInt64(6, object.category);
          fbb.addOffset(7, countryCodeOffset);
          fbb.addInt64(8, object.calories);
          fbb.addInt64(9, object.time);
          fbb.addInt64(10, object.month);
          fbb.addInt64(11, object.carbohydrates);
          fbb.addInt64(12, object.piecesPerServing);
          fbb.addInt64(14, object.cookTime);
          fbb.addInt64(15, object.prepTime);
          fbb.addOffset(16, makeAheadOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final servingsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final piecesPerServingParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final categoryParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final countryCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final caloriesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final timeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final cookTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final prepTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final monthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final carbohydratesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final makeAheadParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final object = Recipe(
              id: idParam,
              title: titleParam,
              source: sourceParam,
              imagePath: imagePathParam,
              notes: notesParam,
              servings: servingsParam,
              piecesPerServing: piecesPerServingParam,
              category: categoryParam,
              countryCode: countryCodeParam,
              calories: caloriesParam,
              time: timeParam,
              cookTime: cookTimeParam,
              prepTime: prepTimeParam,
              month: monthParam,
              carbohydrates: carbohydratesParam,
              makeAhead: makeAheadParam);
          obx_int.InternalToManyAccess.setRelInfo<Recipe>(
              object.steps,
              store,
              obx_int.RelInfo<RecipeStep>.toOneBacklink(
                  6, object.id, (RecipeStep srcObject) => srcObject.recipe));
          return object;
        }),
    RecipeStep: obx_int.EntityDefinition<RecipeStep>(
        model: _entities[4],
        toOneRelations: (RecipeStep object) => [object.recipe],
        toManyRelations: (RecipeStep object) => {
              obx_int.RelInfo<IngredientItem>.toOneBacklink(8, object.id,
                      (IngredientItem srcObject) => srcObject.step):
                  object.ingredients
            },
        getId: (RecipeStep object) => object.id,
        setId: (RecipeStep object, int id) {
          object.id = id;
        },
        objectToFB: (RecipeStep object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final instructionOffset = fbb.writeString(object.instruction);
          final imagePathOffset = fbb.writeString(object.imagePath);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, instructionOffset);
          fbb.addOffset(3, imagePathOffset);
          fbb.addInt64(4, object.timer);
          fbb.addInt64(5, object.recipe.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final instructionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final timerParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = RecipeStep(
              id: idParam,
              name: nameParam,
              instruction: instructionParam,
              imagePath: imagePathParam,
              timer: timerParam);
          object.recipe.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.recipe.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<RecipeStep>(
              object.ingredients,
              store,
              obx_int.RelInfo<IngredientItem>.toOneBacklink(
                  8, object.id, (IngredientItem srcObject) => srcObject.step));
          return object;
        }),
    Tag: obx_int.EntityDefinition<Tag>(
        model: _entities[5],
        toOneRelations: (Tag object) => [object.recipe],
        toManyRelations: (Tag object) => {},
        getId: (Tag object) => object.id,
        setId: (Tag object, int id) {
          object.id = id;
        },
        objectToFB: (Tag object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.recipe.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Tag(id: idParam, name: nameParam);
          object.recipe.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.recipe.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Conversion] entity fields to define ObjectBox queries.
class Conversion_ {
  /// See [Conversion.id].
  static final id =
      obx.QueryIntegerProperty<Conversion>(_entities[0].properties[0]);

  /// See [Conversion.descEN].
  static final descEN =
      obx.QueryStringProperty<Conversion>(_entities[0].properties[1]);

  /// See [Conversion.descFR].
  static final descFR =
      obx.QueryStringProperty<Conversion>(_entities[0].properties[2]);

  /// See [Conversion.factor].
  static final factor =
      obx.QueryDoubleProperty<Conversion>(_entities[0].properties[3]);

  /// See [Conversion.nutrient].
  static final nutrient =
      obx.QueryRelationToOne<Conversion, Nutrient>(_entities[0].properties[4]);

  /// See [Conversion.measureId].
  static final measureId =
      obx.QueryIntegerProperty<Conversion>(_entities[0].properties[5]);

  /// See [Conversion.foodId].
  static final foodId =
      obx.QueryIntegerProperty<Conversion>(_entities[0].properties[6]);
}

/// [IngredientItem] entity fields to define ObjectBox queries.
class IngredientItem_ {
  /// See [IngredientItem.id].
  static final id =
      obx.QueryIntegerProperty<IngredientItem>(_entities[1].properties[0]);

  /// See [IngredientItem.name].
  static final name =
      obx.QueryStringProperty<IngredientItem>(_entities[1].properties[1]);

  /// See [IngredientItem.unit].
  static final unit =
      obx.QueryStringProperty<IngredientItem>(_entities[1].properties[2]);

  /// See [IngredientItem.quantity].
  static final quantity =
      obx.QueryDoubleProperty<IngredientItem>(_entities[1].properties[3]);

  /// See [IngredientItem.shape].
  static final shape =
      obx.QueryStringProperty<IngredientItem>(_entities[1].properties[4]);

  /// See [IngredientItem.foodId].
  static final foodId =
      obx.QueryIntegerProperty<IngredientItem>(_entities[1].properties[5]);

  /// See [IngredientItem.step].
  static final step = obx.QueryRelationToOne<IngredientItem, RecipeStep>(
      _entities[1].properties[6]);

  /// See [IngredientItem.conversionId].
  static final conversionId =
      obx.QueryIntegerProperty<IngredientItem>(_entities[1].properties[7]);
}

/// [Nutrient] entity fields to define ObjectBox queries.
class Nutrient_ {
  /// See [Nutrient.id].
  static final id =
      obx.QueryIntegerProperty<Nutrient>(_entities[2].properties[0]);

  /// See [Nutrient.descEN].
  static final descEN =
      obx.QueryStringProperty<Nutrient>(_entities[2].properties[1]);

  /// See [Nutrient.descFR].
  static final descFR =
      obx.QueryStringProperty<Nutrient>(_entities[2].properties[2]);

  /// See [Nutrient.protein].
  static final protein =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[3]);

  /// See [Nutrient.water].
  static final water =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[4]);

  /// See [Nutrient.lipidTotal].
  static final lipidTotal =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[5]);

  /// See [Nutrient.energKcal].
  static final energKcal =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[6]);

  /// See [Nutrient.carbohydrates].
  static final carbohydrates =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[7]);

  /// See [Nutrient.ash].
  static final ash =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[8]);

  /// See [Nutrient.fiber].
  static final fiber =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[9]);

  /// See [Nutrient.sugar].
  static final sugar =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[10]);

  /// See [Nutrient.calcium].
  static final calcium =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[11]);

  /// See [Nutrient.iron].
  static final iron =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[12]);

  /// See [Nutrient.magnesium].
  static final magnesium =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[13]);

  /// See [Nutrient.phosphorus].
  static final phosphorus =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[14]);

  /// See [Nutrient.potassium].
  static final potassium =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[15]);

  /// See [Nutrient.sodium].
  static final sodium =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[16]);

  /// See [Nutrient.zinc].
  static final zinc =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[17]);

  /// See [Nutrient.copper].
  static final copper =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[18]);

  /// See [Nutrient.manganese].
  static final manganese =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[19]);

  /// See [Nutrient.selenium].
  static final selenium =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[20]);

  /// See [Nutrient.vitaminC].
  static final vitaminC =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[21]);

  /// See [Nutrient.thiamin].
  static final thiamin =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[22]);

  /// See [Nutrient.riboflavin].
  static final riboflavin =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[23]);

  /// See [Nutrient.niacin].
  static final niacin =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[24]);

  /// See [Nutrient.pantoAcid].
  static final pantoAcid =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[25]);

  /// See [Nutrient.vitaminB6].
  static final vitaminB6 =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[26]);

  /// See [Nutrient.folateTotal].
  static final folateTotal =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[27]);

  /// See [Nutrient.folicAcid].
  static final folicAcid =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[28]);

  /// See [Nutrient.foodFolate].
  static final foodFolate =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[29]);

  /// See [Nutrient.folateDFE].
  static final folateDFE =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[30]);

  /// See [Nutrient.cholineTotal].
  static final cholineTotal =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[31]);

  /// See [Nutrient.vitaminB12].
  static final vitaminB12 =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[32]);

  /// See [Nutrient.vitaminAIU].
  static final vitaminAIU =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[33]);

  /// See [Nutrient.vitaminARAE].
  static final vitaminARAE =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[34]);

  /// See [Nutrient.retinol].
  static final retinol =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[35]);

  /// See [Nutrient.alphaCarot].
  static final alphaCarot =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[36]);

  /// See [Nutrient.betaCarot].
  static final betaCarot =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[37]);

  /// See [Nutrient.betaCrypt].
  static final betaCrypt =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[38]);

  /// See [Nutrient.lycopene].
  static final lycopene =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[39]);

  /// See [Nutrient.lutZea].
  static final lutZea =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[40]);

  /// See [Nutrient.vitaminE].
  static final vitaminE =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[41]);

  /// See [Nutrient.vitaminD].
  static final vitaminD =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[42]);

  /// See [Nutrient.vitaminDIU].
  static final vitaminDIU =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[43]);

  /// See [Nutrient.vitaminK].
  static final vitaminK =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[44]);

  /// See [Nutrient.FASat].
  static final FASat =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[45]);

  /// See [Nutrient.FAMono].
  static final FAMono =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[46]);

  /// See [Nutrient.FAPoly].
  static final FAPoly =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[47]);

  /// See [Nutrient.cholesterol].
  static final cholesterol =
      obx.QueryDoubleProperty<Nutrient>(_entities[2].properties[48]);

  /// See [Nutrient.foodId].
  static final foodId =
      obx.QueryIntegerProperty<Nutrient>(_entities[2].properties[49]);

  /// see [Nutrient.conversions]
  static final conversions =
      obx.QueryBacklinkToMany<Conversion, Nutrient>(Conversion_.nutrient);
}

/// [Recipe] entity fields to define ObjectBox queries.
class Recipe_ {
  /// See [Recipe.id].
  static final id =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[0]);

  /// See [Recipe.title].
  static final title =
      obx.QueryStringProperty<Recipe>(_entities[3].properties[1]);

  /// See [Recipe.source].
  static final source =
      obx.QueryStringProperty<Recipe>(_entities[3].properties[2]);

  /// See [Recipe.imagePath].
  static final imagePath =
      obx.QueryStringProperty<Recipe>(_entities[3].properties[3]);

  /// See [Recipe.notes].
  static final notes =
      obx.QueryStringProperty<Recipe>(_entities[3].properties[4]);

  /// See [Recipe.servings].
  static final servings =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[5]);

  /// See [Recipe.category].
  static final category =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[6]);

  /// See [Recipe.countryCode].
  static final countryCode =
      obx.QueryStringProperty<Recipe>(_entities[3].properties[7]);

  /// See [Recipe.calories].
  static final calories =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[8]);

  /// See [Recipe.time].
  static final time =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[9]);

  /// See [Recipe.month].
  static final month =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[10]);

  /// See [Recipe.carbohydrates].
  static final carbohydrates =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[11]);

  /// See [Recipe.piecesPerServing].
  static final piecesPerServing =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[12]);

  /// See [Recipe.cookTime].
  static final cookTime =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[13]);

  /// See [Recipe.prepTime].
  static final prepTime =
      obx.QueryIntegerProperty<Recipe>(_entities[3].properties[14]);

  /// See [Recipe.makeAhead].
  static final makeAhead =
      obx.QueryStringProperty<Recipe>(_entities[3].properties[15]);

  /// see [Recipe.steps]
  static final steps =
      obx.QueryBacklinkToMany<RecipeStep, Recipe>(RecipeStep_.recipe);
}

/// [RecipeStep] entity fields to define ObjectBox queries.
class RecipeStep_ {
  /// See [RecipeStep.id].
  static final id =
      obx.QueryIntegerProperty<RecipeStep>(_entities[4].properties[0]);

  /// See [RecipeStep.name].
  static final name =
      obx.QueryStringProperty<RecipeStep>(_entities[4].properties[1]);

  /// See [RecipeStep.instruction].
  static final instruction =
      obx.QueryStringProperty<RecipeStep>(_entities[4].properties[2]);

  /// See [RecipeStep.imagePath].
  static final imagePath =
      obx.QueryStringProperty<RecipeStep>(_entities[4].properties[3]);

  /// See [RecipeStep.timer].
  static final timer =
      obx.QueryIntegerProperty<RecipeStep>(_entities[4].properties[4]);

  /// See [RecipeStep.recipe].
  static final recipe =
      obx.QueryRelationToOne<RecipeStep, Recipe>(_entities[4].properties[5]);

  /// see [RecipeStep.ingredients]
  static final ingredients =
      obx.QueryBacklinkToMany<IngredientItem, RecipeStep>(IngredientItem_.step);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// See [Tag.id].
  static final id = obx.QueryIntegerProperty<Tag>(_entities[5].properties[0]);

  /// See [Tag.name].
  static final name = obx.QueryStringProperty<Tag>(_entities[5].properties[1]);

  /// See [Tag.recipe].
  static final recipe =
      obx.QueryRelationToOne<Tag, Recipe>(_entities[5].properties[2]);
}
